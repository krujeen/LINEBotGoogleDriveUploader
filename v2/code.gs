// code.gs
// ‡πÅ‡∏Å‡πâ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 4,5,6 ‡πÅ‡∏•‡∏∞ 15

const LINE_CHANNEL_ACCESS_TOKEN = '‡∏Å‡∏£‡∏≠‡∏Å Channel access token';
const LINE_CHANNEL_SECRET = '‡∏Å‡∏£‡∏≠‡∏Å Channel secret';
const FOLDER_ID = 'ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå';


/**
 * ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏û‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
 */
function doGet() {
  return HtmlService.createHtmlOutputFromFile('index')
    .setTitle('Google Drive File Manager')
    .setFaviconUrl('https://www.krujeen.com/wp-content/uploads/2020/04/logo_krujeen3.png')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL)
    .addMetaTag('viewport', 'width=device-width, initial-scale=1');
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡∏£‡∏Å‡πÑ‡∏ü‡∏•‡πå HTML ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}



function doPost(e) {
  const json = JSON.parse(e.postData.contents);
  const event = json.events[0];
  const userId = event.source.userId;
  const replyToken = event.replyToken;
  const message = event.message;

  const cache = CacheService.getUserCache();
  let category = cache.get(userId) || 'Uncategorized';

  // -----------------------------
  // ‚úÖ 1. ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "/"
  // -----------------------------

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  if (message.type === 'text' && message.text.startsWith("/")) {
    const command = message.text.substring(1).trim(); // ‡∏ï‡∏±‡∏î '/' ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤

    if (command.toLowerCase() === "reset") {
      cache.remove(userId);
      replyWithQuickReply(replyToken, "üóÇ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà:");
    } else {
      cache.put(userId, command, 3600); // ‡∏à‡∏≥‡πÑ‡∏ß‡πâ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      replyToLine(replyToken, `‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô: ${command}`);
    }

    return ContentService.createTextOutput(JSON.stringify({ 'status': 'category command handled' })).setMimeType(ContentService.MimeType.JSON);
  }

  // -----------------------------
  // ‚úÖ 2. ‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏±‡∏ö "‡πÑ‡∏ü‡∏•‡πå"
  // -----------------------------
  if (message.type === 'file') {
    const messageId = message.id;
    const messageName = message.fileName;
    const file = getFileFromLine(messageId, messageName);

    const now = new Date();
    const todayDate = now.toISOString().slice(0, 10);
    const fileName = `${todayDate}_${file.name}`;
    const fileId = saveFileToDrive(fileName, file.data, category);
    const fileLink = `https://drive.google.com/file/d/${fileId}/view`;

    const responseMessage = `üìÅ ${category}\n${fileName}\nüîó ${fileLink}`;
    replyToLine(replyToken, responseMessage);
  }

  // -----------------------------
  // ‚úÖ 3. ‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏±‡∏ö "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
  // -----------------------------
  if (message.type === 'image') {
    const messageId = message.id;
    const file = getFileFromLine(messageId, "image.jpg");

    const now = new Date();
    const todayDate = now.toISOString().slice(0, 10);
    const time = now.toTimeString().slice(0, 8).replace(/:/g, '-');
    const fileName = `${todayDate}_${time}_image.jpg`;

    const fileId = saveFileToDrive(fileName, file.data, category);
    const fileLink = `https://drive.google.com/file/d/${fileId}/view`;

    const responseMessage = `üìÅ ${category}\nüñºÔ∏è ${fileName}\nüîó ${fileLink}`;
    replyToLine(replyToken, responseMessage);
  }

  return ContentService.createTextOutput(JSON.stringify({ 'status': 'ok' })).setMimeType(ContentService.MimeType.JSON);
}




function getFileFromLine(messageId, messageName) {
  const url = `https://api-data.line.me/v2/bot/message/${messageId}/content`;
  const headers = {
    "Authorization": "Bearer " + LINE_CHANNEL_ACCESS_TOKEN
  };
  const response = UrlFetchApp.fetch(url, { headers: headers });
  const blob = response.getBlob();
  return {
    name: messageName,
    data: blob
  };
}

function saveFileToDrive(fileName, fileData, category = 'Uncategorized') {
  const rootFolder = DriveApp.getFolderById(FOLDER_ID);
  let subFolder;
  
  // Check if folder exists
  const folders = rootFolder.getFoldersByName(category);
  if (folders.hasNext()) {
    subFolder = folders.next();
  } else {
    subFolder = rootFolder.createFolder(category);
  }

  const file = subFolder.createFile(fileData);
  file.setName(fileName);
  file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
  return file.getId();
}

function getFiles() {
  const files = [];
  const folder = DriveApp.getFolderById(FOLDER_ID);
  const subFolders = folder.getFolders();

  while (subFolders.hasNext()) {
    const sub = subFolders.next();
    const filesIterator = sub.getFiles();
    while (filesIterator.hasNext()) {
      const file = filesIterator.next();
      files.push({
        id: file.getId(),
        name: `[${sub.getName()}] ${file.getName()}`,
        link: `https://drive.google.com/file/d/${file.getId()}/view`
      });
    }
  }

  return files;
}



function replyToLine(replyToken, message) {
  const url = "https://api.line.me/v2/bot/message/reply";
  const headers = {
    "Content-Type": "application/json",
    "Authorization": "Bearer " + LINE_CHANNEL_ACCESS_TOKEN
  };
  const payload = JSON.stringify({
    replyToken: replyToken,
    messages: [{
      type: "text",
      text: message
    }]
  });
  UrlFetchApp.fetch(url, {
    method: "post",
    headers: headers,
    payload: payload
  });
}


function replyWithQuickReply(replyToken, text) {
  const url = "https://api.line.me/v2/bot/message/reply";
  const headers = {
    "Content-Type": "application/json",
    "Authorization": "Bearer " + LINE_CHANNEL_ACCESS_TOKEN
  };

  const quickReplies = [
    "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì",
    "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
    "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏ö‡∏£‡∏°",
    "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"
  ].map(category => ({
    type: "action",
    action: {
      type: "message",
      label: category,
      text: `/${category}`
    }
  }));

  const payload = JSON.stringify({
    replyToken: replyToken,
    messages: [{
      type: "text",
      text: text,
      quickReply: {
        items: quickReplies
      }
    }]
  });

  UrlFetchApp.fetch(url, {
    method: "post",
    headers: headers,
    payload: payload
  });
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á role ‡πÄ‡∏õ‡πá‡∏ô permission
function getRolePermission(role) {
  switch (role) {
    case "writer":
      return DriveApp.Permission.EDIT;
    case "commenter":
      return DriveApp.Permission.COMMENT;
    case "reader":
    default:
      return DriveApp.Permission.VIEW;
  }
}


/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
 */
function getFolderContents(folderId) {
  try {
    let folder;
    
    if (folderId === 'root') {
      folder = DriveApp.getRootFolder();
    } else {
      folder = DriveApp.getFolderById(folderId);
    }
    
    // ‡∏î‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const folderIterator = folder.getFolders();
    const folders = [];
    
    while (folderIterator.hasNext()) {
      const subFolder = folderIterator.next();
      folders.push({
        id: subFolder.getId(),
        name: subFolder.getName()
      });
    }
    
    // ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const fileIterator = folder.getFiles();
    const files = [];
    
    while (fileIterator.hasNext()) {
      const file = fileIterator.next();
      files.push({
        id: file.getId(),
        name: file.getName(),
        link: file.getUrl()
      });
    }
    
    return {
      folders: folders,
      files: files
    };
  } catch (e) {
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: " + e.toString());
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å ID
 */
function getFolderName(folderId) {
  try {
    const folder = DriveApp.getFolderById(folderId);
    return folder.getName();
  } catch (e) {
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: " + e.toString());
  }
}

/**
 * ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
 */
function deleteFile(fileId) {
  try {
    const file = DriveApp.getFileById(fileId);
    file.setTrashed(true);
    return true;
  } catch (e) {
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: " + e.toString());
  }
}

/**
 * ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
 */
function renameFile(fileId, newName) {
  try {
    const file = DriveApp.getFileById(fileId);
    file.setName(newName);
    return true;
  } catch (e) {
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: " + e.toString());
  }
}

/**
 * ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
 */
function renameFolder(folderId, newName) {
  try {
    const folder = DriveApp.getFolderById(folderId);
    folder.setName(newName);
    return true;
  } catch (e) {
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: " + e.toString());
  }
}

/**
 * ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
 */
function deleteFolder(folderId) {
  try {
    const folder = DriveApp.getFolderById(folderId);
    folder.setTrashed(true);
    return true;
  } catch (e) {
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: " + e.toString());
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
 */
function getAllFolders(rootFolderId) {
  try {
    const rootFolder = DriveApp.getFolderById(rootFolderId);
    const folders = [];
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
    folders.push({
      id: rootFolder.getId(),
      name: rootFolder.getName() + " (‡∏´‡∏•‡∏±‡∏Å)"
    });
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
    function addFoldersRecursively(parentFolder, depth = 0, maxDepth = 2) {
      if (depth >= maxDepth) return; // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
      
      const subFolders = parentFolder.getFolders();
      while (subFolders.hasNext()) {
        const folder = subFolders.next();
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏∑‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö
        const indentation = "‚Äî".repeat(depth);
        const displayName = depth > 0 ? `${indentation} ${folder.getName()}` : folder.getName();
        
        folders.push({
          id: folder.getId(),
          name: displayName
        });
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        addFoldersRecursively(folder, depth + 1, maxDepth);
      }
    }
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
    addFoldersRecursively(rootFolder);
    
    return folders;
  } catch (e) {
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: " + e.toString());
  }
}

/**
 * ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
 */
function moveFile(fileId, targetFolderId) {
  try {
    const file = DriveApp.getFileById(fileId);
    const targetFolder = DriveApp.getFolderById(targetFolderId);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    targetFolder.addFile(file);
    
    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°
    const parents = file.getParents();
    while (parents.hasNext()) {
      const parent = parents.next();
      if (parent.getId() !== targetFolderId) {
        parent.removeFile(file);
      }
    }
    
    return true;
  } catch (e) {
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: " + e.toString());
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ä‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
function getShareLink(fileId) {
  try {
    var file = DriveApp.getFileById(fileId);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    var access = file.getSharingAccess();
    var permission = file.getSharingPermission();
    
    // ‡πÅ‡∏õ‡∏•‡∏á permission ‡πÄ‡∏õ‡πá‡∏ô role
    var role = "reader";
    if (permission == DriveApp.Permission.COMMENT) {
      role = "commenter";
    } else if (permission == DriveApp.Permission.EDIT) {
      role = "writer";
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏ä‡∏£‡πå ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
    if (access == DriveApp.Access.PRIVATE) {
      return { link: null, role: role };
    }
    
    // ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
    var url = file.getUrl();
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ä‡∏£‡πå
    if (url.indexOf('drive.google.com/file/d/') > -1) {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏µ URL ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö /file/d/
      url = url.replace('/file/d/', '/uc?id=').replace(/\/view.*$/, '');
    } else if (url.indexOf('drive.google.com/open') > -1) {
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∞‡πÑ‡∏£ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ä‡∏£‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ Google (Docs, Sheets, Slides, etc.)
      url = url.replace(/\/edit.*$/, '/view');
    }
    
    return {
      link: url,
      role: role
    };
  } catch (e) {
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏î‡πâ: " + e.toString());
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ä‡∏£‡πå
 */
function createShareLink(fileId, role) {
  try {
    var file = DriveApp.getFileById(fileId);
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÉ‡∏Ñ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Ñ‡πå
    file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, getRolePermission(role));
    
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ getShareLink
    return getShareLink(fileId);
  } catch (e) {
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏î‡πâ: " + e.toString());
  }
}


/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
function createNewFolder(parentFolderId, folderName) {
  try {
    const parentFolder = DriveApp.getFolderById(parentFolderId);
    const newFolder = parentFolder.createFolder(folderName);
    
    return {
      id: newFolder.getId(),
      name: newFolder.getName()
    };
  } catch (e) {
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ: " + e.toString());
  }
}
